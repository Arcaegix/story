// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: client/x/evmstaking/types/evmstaking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/x/slashing/types"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Withdrawal struct {
	CreationHeight   uint64 `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	ValidatorAddress string `protobuf:"bytes,3,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	// TODO: use ethcommon.Address type
	ExecutionAddress string `protobuf:"bytes,4,opt,name=execution_address,json=executionAddress,proto3" json:"execution_address,omitempty" yaml:"execution_address"`
	Amount           uint64 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty" yaml:"amount"`
}

func (m *Withdrawal) Reset()         { *m = Withdrawal{} }
func (m *Withdrawal) String() string { return proto.CompactTextString(m) }
func (*Withdrawal) ProtoMessage()    {}
func (*Withdrawal) Descriptor() ([]byte, []int) {
	return fileDescriptor_185991fb447209d8, []int{0}
}
func (m *Withdrawal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Withdrawal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Withdrawal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Withdrawal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Withdrawal.Merge(m, src)
}
func (m *Withdrawal) XXX_Size() int {
	return m.Size()
}
func (m *Withdrawal) XXX_DiscardUnknown() {
	xxx_messageInfo_Withdrawal.DiscardUnknown(m)
}

var xxx_messageInfo_Withdrawal proto.InternalMessageInfo

// QueuedMessage is a message that can change the validator set and is delayed
// to the end of an epoch
type QueuedMessage struct {
	// tx_id is the ID of the tx that contains the message
	TxId []byte `protobuf:"bytes,1,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	// msg_id is the original message ID, i.e., hash of the marshaled message
	MsgId []byte `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// block_height is the height when this msg is submitted
	BlockHeight uint64 `protobuf:"varint,3,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	// block_time is the timestamp when this msg is submitted
	BlockTime *time.Time `protobuf:"bytes,4,opt,name=block_time,json=blockTime,proto3,stdtime" json:"block_time,omitempty"`
	// msg is the actual message that is sent by a user and is queued by the
	// epoching module
	//
	// Types that are valid to be assigned to Msg:
	//	*QueuedMessage_MsgCreateValidator
	//	*QueuedMessage_MsgDelegate
	//	*QueuedMessage_MsgUndelegate
	//	*QueuedMessage_MsgBeginRedelegate
	//	*QueuedMessage_MsgUnjail
	Msg isQueuedMessage_Msg `protobuf_oneof:"msg"`
}

func (m *QueuedMessage) Reset()         { *m = QueuedMessage{} }
func (m *QueuedMessage) String() string { return proto.CompactTextString(m) }
func (*QueuedMessage) ProtoMessage()    {}
func (*QueuedMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_185991fb447209d8, []int{1}
}
func (m *QueuedMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueuedMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueuedMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueuedMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueuedMessage.Merge(m, src)
}
func (m *QueuedMessage) XXX_Size() int {
	return m.Size()
}
func (m *QueuedMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_QueuedMessage.DiscardUnknown(m)
}

var xxx_messageInfo_QueuedMessage proto.InternalMessageInfo

type isQueuedMessage_Msg interface {
	isQueuedMessage_Msg()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueuedMessage_MsgCreateValidator struct {
	MsgCreateValidator *types.MsgCreateValidator `protobuf:"bytes,5,opt,name=msg_create_validator,json=msgCreateValidator,proto3,oneof" json:"msg_create_validator,omitempty"`
}
type QueuedMessage_MsgDelegate struct {
	MsgDelegate *types.MsgDelegate `protobuf:"bytes,6,opt,name=msg_delegate,json=msgDelegate,proto3,oneof" json:"msg_delegate,omitempty"`
}
type QueuedMessage_MsgUndelegate struct {
	MsgUndelegate *types.MsgUndelegate `protobuf:"bytes,7,opt,name=msg_undelegate,json=msgUndelegate,proto3,oneof" json:"msg_undelegate,omitempty"`
}
type QueuedMessage_MsgBeginRedelegate struct {
	MsgBeginRedelegate *types.MsgBeginRedelegate `protobuf:"bytes,8,opt,name=msg_begin_redelegate,json=msgBeginRedelegate,proto3,oneof" json:"msg_begin_redelegate,omitempty"`
}
type QueuedMessage_MsgUnjail struct {
	MsgUnjail *types1.MsgUnjail `protobuf:"bytes,9,opt,name=msg_unjail,json=msgUnjail,proto3,oneof" json:"msg_unjail,omitempty"`
}

func (*QueuedMessage_MsgCreateValidator) isQueuedMessage_Msg() {}
func (*QueuedMessage_MsgDelegate) isQueuedMessage_Msg()        {}
func (*QueuedMessage_MsgUndelegate) isQueuedMessage_Msg()      {}
func (*QueuedMessage_MsgBeginRedelegate) isQueuedMessage_Msg() {}
func (*QueuedMessage_MsgUnjail) isQueuedMessage_Msg()          {}

func (m *QueuedMessage) GetMsg() isQueuedMessage_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *QueuedMessage) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

func (m *QueuedMessage) GetMsgId() []byte {
	if m != nil {
		return m.MsgId
	}
	return nil
}

func (m *QueuedMessage) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *QueuedMessage) GetBlockTime() *time.Time {
	if m != nil {
		return m.BlockTime
	}
	return nil
}

func (m *QueuedMessage) GetMsgCreateValidator() *types.MsgCreateValidator {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgCreateValidator); ok {
		return x.MsgCreateValidator
	}
	return nil
}

func (m *QueuedMessage) GetMsgDelegate() *types.MsgDelegate {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgDelegate); ok {
		return x.MsgDelegate
	}
	return nil
}

func (m *QueuedMessage) GetMsgUndelegate() *types.MsgUndelegate {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgUndelegate); ok {
		return x.MsgUndelegate
	}
	return nil
}

func (m *QueuedMessage) GetMsgBeginRedelegate() *types.MsgBeginRedelegate {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgBeginRedelegate); ok {
		return x.MsgBeginRedelegate
	}
	return nil
}

func (m *QueuedMessage) GetMsgUnjail() *types1.MsgUnjail {
	if x, ok := m.GetMsg().(*QueuedMessage_MsgUnjail); ok {
		return x.MsgUnjail
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueuedMessage) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueuedMessage_MsgCreateValidator)(nil),
		(*QueuedMessage_MsgDelegate)(nil),
		(*QueuedMessage_MsgUndelegate)(nil),
		(*QueuedMessage_MsgBeginRedelegate)(nil),
		(*QueuedMessage_MsgUnjail)(nil),
	}
}

func init() {
	proto.RegisterType((*Withdrawal)(nil), "client.x.evmstaking.types.Withdrawal")
	proto.RegisterType((*QueuedMessage)(nil), "client.x.evmstaking.types.QueuedMessage")
}

func init() {
	proto.RegisterFile("client/x/evmstaking/types/evmstaking.proto", fileDescriptor_185991fb447209d8)
}

var fileDescriptor_185991fb447209d8 = []byte{
	// 630 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcf, 0x4e, 0x14, 0x31,
	0x1c, 0x9e, 0x61, 0xff, 0xc8, 0x76, 0x01, 0xa5, 0x62, 0xb2, 0x90, 0xb8, 0x83, 0x6b, 0x8c, 0x48,
	0xe2, 0x4c, 0x00, 0x4f, 0x24, 0xc6, 0xb8, 0x78, 0x58, 0x0e, 0x98, 0x38, 0xfe, 0x4b, 0x3c, 0xb8,
	0xe9, 0xee, 0xd4, 0xee, 0xc0, 0x74, 0x4a, 0xa6, 0x9d, 0x75, 0x78, 0x03, 0x8f, 0x3c, 0x80, 0x07,
	0x1e, 0xc2, 0x57, 0x30, 0xf1, 0x48, 0x3c, 0x79, 0x42, 0x03, 0x17, 0xcf, 0x3c, 0x81, 0x69, 0xa7,
	0x1d, 0x96, 0x5d, 0xc5, 0xdb, 0xf4, 0xeb, 0xf7, 0xfb, 0xbe, 0x7e, 0xfd, 0xfd, 0x3a, 0x60, 0xb5,
	0x1f, 0x85, 0x38, 0x16, 0x5e, 0xe6, 0xe1, 0x21, 0xe5, 0x02, 0xed, 0x85, 0x31, 0xf1, 0xc4, 0xc1,
	0x3e, 0xe6, 0x23, 0x80, 0xbb, 0x9f, 0x30, 0xc1, 0xe0, 0x62, 0xce, 0x75, 0x33, 0x77, 0x64, 0x4b,
	0x71, 0x97, 0x1c, 0xc2, 0x18, 0x89, 0xb0, 0xa7, 0x88, 0xbd, 0xf4, 0x83, 0x27, 0x42, 0x8a, 0xb9,
	0x40, 0x74, 0x3f, 0xaf, 0x5d, 0x5a, 0x20, 0x8c, 0x30, 0xf5, 0xe9, 0xc9, 0x2f, 0x8d, 0x2e, 0xf6,
	0x19, 0xa7, 0x8c, 0x77, 0xf3, 0x8d, 0x7c, 0xa1, 0xb7, 0x9c, 0x7c, 0xe5, 0x99, 0x33, 0x0d, 0xd7,
	0x7a, 0x58, 0xa0, 0x35, 0x4f, 0x64, 0x9a, 0xb0, 0x6c, 0x08, 0x11, 0xe2, 0x83, 0xbf, 0x31, 0x5a,
	0x9f, 0x4b, 0x00, 0xbc, 0x0d, 0xc5, 0x20, 0x48, 0xd0, 0x47, 0x14, 0xc1, 0xfb, 0xe0, 0x7a, 0x3f,
	0xc1, 0x48, 0x84, 0x2c, 0xee, 0x0e, 0x70, 0x48, 0x06, 0xa2, 0x61, 0x2f, 0xdb, 0x2b, 0x65, 0x7f,
	0xce, 0xc0, 0x1d, 0x85, 0x42, 0x04, 0xe6, 0x03, 0x1c, 0x61, 0x82, 0x04, 0x4b, 0xba, 0x28, 0x08,
	0x12, 0xcc, 0x79, 0x63, 0x6a, 0xd9, 0x5e, 0xa9, 0xb5, 0x1f, 0x9d, 0x9f, 0x38, 0x8d, 0x03, 0x44,
	0xa3, 0xcd, 0xd6, 0x04, 0xa5, 0xf5, 0xfd, 0xcb, 0xc3, 0x05, 0x9d, 0xe1, 0x69, 0x0e, 0xbd, 0x14,
	0x49, 0x18, 0x13, 0xff, 0x46, 0xc1, 0xd5, 0x38, 0xdc, 0x05, 0xf3, 0x43, 0x14, 0x85, 0xc1, 0x25,
	0x8b, 0x92, 0xb2, 0x78, 0x7c, 0x61, 0x31, 0x41, 0x91, 0x16, 0xb7, 0xb5, 0xc5, 0x1b, 0xb3, 0x39,
	0xe6, 0x35, 0x1c, 0xc3, 0x65, 0x1c, 0x9c, 0xe1, 0x7e, 0xaa, 0x82, 0x1b, 0xaf, 0xf2, 0x78, 0x9c,
	0x09, 0xca, 0x15, 0x71, 0x0a, 0xae, 0xb1, 0x78, 0x00, 0xaa, 0x88, 0xb2, 0x34, 0x16, 0x8d, 0x8a,
	0xbc, 0xd1, 0xf6, 0xfc, 0xf9, 0x89, 0x33, 0x9b, 0xeb, 0xe6, 0x78, 0xcb, 0xd7, 0x84, 0xcd, 0xe9,
	0x4f, 0x47, 0x8e, 0xf5, 0xfb, 0xc8, 0xb1, 0x5b, 0x5f, 0xcb, 0x60, 0xf6, 0x45, 0x8a, 0x53, 0x1c,
	0xec, 0x60, 0xce, 0x11, 0xc1, 0xf0, 0x26, 0xa8, 0x88, 0xac, 0x1b, 0x06, 0xaa, 0x2f, 0x33, 0x7e,
	0x59, 0x64, 0xdb, 0x01, 0xbc, 0x05, 0xaa, 0x94, 0x13, 0x89, 0x4e, 0x29, 0xb4, 0x42, 0x39, 0xd9,
	0x0e, 0xe0, 0x1d, 0x30, 0xd3, 0x8b, 0x58, 0x7f, 0xcf, 0xb4, 0xb2, 0xa4, 0x5a, 0x59, 0x57, 0x98,
	0xee, 0xe3, 0x13, 0x00, 0x72, 0x8a, 0x1c, 0x46, 0x95, 0xb8, 0xbe, 0xbe, 0xe4, 0xe6, 0x93, 0xea,
	0x9a, 0x49, 0x75, 0x5f, 0x99, 0x49, 0x6d, 0x97, 0x0f, 0x7f, 0x3a, 0xb6, 0x5f, 0x53, 0x35, 0x12,
	0x85, 0xef, 0xc1, 0x82, 0xb4, 0x56, 0xe3, 0x81, 0xbb, 0xc5, 0xc5, 0xaa, 0x90, 0xf5, 0xf5, 0x55,
	0x57, 0xdf, 0x8e, 0x79, 0x0a, 0x7a, 0x00, 0xdd, 0x1d, 0x4e, 0xb6, 0x54, 0x49, 0xd1, 0xa2, 0x8e,
	0xe5, 0x43, 0x3a, 0x81, 0xc2, 0x0e, 0x98, 0x91, 0xfa, 0x7a, 0x3a, 0x70, 0xa3, 0xaa, 0x74, 0xef,
	0x5e, 0xa1, 0xfb, 0x4c, 0x53, 0x3b, 0x96, 0x5f, 0xa7, 0x17, 0x4b, 0xf8, 0x1c, 0xcc, 0x49, 0xa5,
	0x34, 0x2e, 0xb4, 0xae, 0x29, 0xad, 0x7b, 0x57, 0x68, 0xbd, 0x2e, 0xc8, 0x1d, 0xcb, 0x9f, 0xa5,
	0xa3, 0x80, 0x49, 0xde, 0xc3, 0x24, 0x8c, 0xbb, 0x09, 0x2e, 0x54, 0xa7, 0xff, 0x9b, 0xbc, 0x2d,
	0x4b, 0x7c, 0x3c, 0x22, 0x2d, 0x93, 0x8f, 0xa1, 0x70, 0x0b, 0x80, 0xfc, 0xbc, 0xbb, 0x28, 0x8c,
	0x1a, 0x35, 0xa5, 0xda, 0x2a, 0x54, 0xf5, 0x8b, 0xbe, 0x7c, 0x58, 0xc9, 0xec, 0x58, 0x7e, 0x8d,
	0x9a, 0x45, 0xbb, 0x02, 0x4a, 0x52, 0x7a, 0xe3, 0xdb, 0x69, 0xd3, 0x3e, 0x3e, 0x6d, 0xda, 0xbf,
	0x4e, 0x9b, 0xf6, 0xe1, 0x59, 0xd3, 0x3a, 0x3e, 0x6b, 0x5a, 0x3f, 0xce, 0x9a, 0xd6, 0xbb, 0xc5,
	0x7f, 0xfe, 0xdc, 0x7a, 0x55, 0xd5, 0xff, 0x8d, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x85, 0x38,
	0x61, 0x91, 0x00, 0x05, 0x00, 0x00,
}

func (this *Withdrawal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Withdrawal)
	if !ok {
		that2, ok := that.(Withdrawal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreationHeight != that1.CreationHeight {
		return false
	}
	if this.DelegatorAddress != that1.DelegatorAddress {
		return false
	}
	if this.ValidatorAddress != that1.ValidatorAddress {
		return false
	}
	if this.ExecutionAddress != that1.ExecutionAddress {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (m *Withdrawal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Withdrawal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Withdrawal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintEvmstaking(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ExecutionAddress) > 0 {
		i -= len(m.ExecutionAddress)
		copy(dAtA[i:], m.ExecutionAddress)
		i = encodeVarintEvmstaking(dAtA, i, uint64(len(m.ExecutionAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintEvmstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintEvmstaking(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.CreationHeight != 0 {
		i = encodeVarintEvmstaking(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueuedMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuedMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Msg != nil {
		{
			size := m.Msg.Size()
			i -= size
			if _, err := m.Msg.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.BlockTime != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.BlockTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BlockTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintEvmstaking(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x22
	}
	if m.BlockHeight != 0 {
		i = encodeVarintEvmstaking(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.MsgId) > 0 {
		i -= len(m.MsgId)
		copy(dAtA[i:], m.MsgId)
		i = encodeVarintEvmstaking(dAtA, i, uint64(len(m.MsgId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintEvmstaking(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueuedMessage_MsgCreateValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgCreateValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgCreateValidator != nil {
		{
			size, err := m.MsgCreateValidator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvmstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessage_MsgDelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgDelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgDelegate != nil {
		{
			size, err := m.MsgDelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvmstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessage_MsgUndelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgUndelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgUndelegate != nil {
		{
			size, err := m.MsgUndelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvmstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessage_MsgBeginRedelegate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgBeginRedelegate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgBeginRedelegate != nil {
		{
			size, err := m.MsgBeginRedelegate.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvmstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *QueuedMessage_MsgUnjail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueuedMessage_MsgUnjail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MsgUnjail != nil {
		{
			size, err := m.MsgUnjail.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintEvmstaking(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func encodeVarintEvmstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvmstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Withdrawal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovEvmstaking(uint64(m.CreationHeight))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	l = len(m.ExecutionAddress)
	if l > 0 {
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovEvmstaking(uint64(m.Amount))
	}
	return n
}

func (m *QueuedMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	l = len(m.MsgId)
	if l > 0 {
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovEvmstaking(uint64(m.BlockHeight))
	}
	if m.BlockTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.BlockTime)
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	if m.Msg != nil {
		n += m.Msg.Size()
	}
	return n
}

func (m *QueuedMessage_MsgCreateValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgCreateValidator != nil {
		l = m.MsgCreateValidator.Size()
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	return n
}
func (m *QueuedMessage_MsgDelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgDelegate != nil {
		l = m.MsgDelegate.Size()
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	return n
}
func (m *QueuedMessage_MsgUndelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgUndelegate != nil {
		l = m.MsgUndelegate.Size()
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	return n
}
func (m *QueuedMessage_MsgBeginRedelegate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgBeginRedelegate != nil {
		l = m.MsgBeginRedelegate.Size()
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	return n
}
func (m *QueuedMessage_MsgUnjail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgUnjail != nil {
		l = m.MsgUnjail.Size()
		n += 1 + l + sovEvmstaking(uint64(l))
	}
	return n
}

func sovEvmstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvmstaking(x uint64) (n int) {
	return sovEvmstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Withdrawal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Withdrawal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Withdrawal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExecutionAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvmstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuedMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvmstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuedMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuedMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = append(m.TxId[:0], dAtA[iNdEx:postIndex]...)
			if m.TxId == nil {
				m.TxId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgId = append(m.MsgId[:0], dAtA[iNdEx:postIndex]...)
			if m.MsgId == nil {
				m.MsgId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockTime == nil {
				m.BlockTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.BlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgCreateValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgCreateValidator{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgCreateValidator{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgDelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgDelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgDelegate{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUndelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgUndelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgUndelegate{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBeginRedelegate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types.MsgBeginRedelegate{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgBeginRedelegate{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgUnjail", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvmstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &types1.MsgUnjail{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Msg = &QueuedMessage_MsgUnjail{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvmstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvmstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvmstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvmstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvmstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvmstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvmstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvmstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvmstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvmstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvmstaking = fmt.Errorf("proto: unexpected end of group")
)
